@using EZHotel.DTOs.Rooms
@using EZHotel.Helpers
@inherits RoomFormBase

<EditForm Model="Model" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row">
        <div class="col-md-6">
            <div class="mb-3">
                <label>Name</label>
                <InputText class="form-control" @bind-Value="Model.Name" />
            </div>

            <div class="mb-3">
                <label>Description</label>
                <InputTextArea class="form-control" @bind-Value="Model.Description" />
            </div>

            <div class="mb-3">
                <label>Capacity</label>
                <InputNumber class="form-control"
                             Value="@Model.Capacity"
                             ValueChanged="@((int newCapacity) => OnCapacityChanged(newCapacity))"
                             ValueExpression="() => Model.Capacity" />
            </div>

            <div class="mb-3">
                <label>Room Type</label>
                <InputSelect class="form-control"
                             Value="@Model.RoomType"
                             ValueChanged="@((RoomType newRoomType) => OnRoomTypeChanged(newRoomType))"
                             ValueExpression="() => Model.RoomType"
                >
                    @foreach (RoomType type in Enum.GetValues(typeof(RoomType)))
                    {
                        <option value="@type">@BF.GetDisplayNameEnum(type)</option>
                    }
                </InputSelect>
            </div>

            <div class="mb-3">
                <label>Price</label>
                <InputNumber class="form-control readonly-input" @bind-Value="Model.Price" readonly />
            </div>

            <div class="form-check mb-3">
                <InputCheckbox class="form-check-input" @bind-Value="Model.IsAvailable" />
                <label class="form-check-label">Available</label>
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">@errorMessage</div>
            }

            <button class="btn btn-primary" type="submit">Save</button>
        </div>

        <div class="col-md-6">
            <div class="row">
                @if (ImagePreviews != null && ImagePreviews.Count > 0)
                {
                    @for (int i = 0; i < ImagePreviews.Count; i++)
                    {
                        <div class="col-6 mb-3">
                            <img src="@ImagePreviews[i]" class="img-fluid border rounded" alt="Image @(i+1)" />
                        </div>
                    }
                }
                else
                {
                    <div class="col-12 mb-3 d-flex align-items-center justify-content-center"
                         style="background-color: #e0e0e0; height: 200px; border-radius: 8px;">
                    </div>
                }
            </div>

            <label class="btn btn-primary">
                Select files
                <InputFile OnChange="OnImagesSelected" multiple style="display:none;" />
            </label>
        </div>
    </div>
</EditForm>

<style>
    .readonly-input[readonly] {
        background-color: #f0f0f0;
        color: #6c757d;
        cursor: not-allowed;
    }

    img {
        object-fit: cover;
        height: 150px;
        width: 100%;
    }
</style>
